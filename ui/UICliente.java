/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package apsredes.ui;

import apsredes.classes.SocketCliente;
import apsredes.classes.ComandoMensagem;
import apsredes.classes.InformacoesCliente;
import apsredes.enums.ComandoEnum;
import java.io.File;
import java.io.IOException;
import java.net.Socket;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class UICliente extends javax.swing.JFrame {
    private final InformacoesCliente informacoesCliente;
    private final SocketCliente clienteSocket;
    public final DefaultListModel<String> listaClientes;
    private int idSelecionadoDaListaClientes;

    /**
     * Creates new form Cliente
     * @param infoCliente
     * @param socket
     */
    UICliente(InformacoesCliente infoCliente, Socket socket) throws IOException {
        this.informacoesCliente = infoCliente;
        listaClientes = new DefaultListModel<>();
        listaClientes.addElement("Todos");
        idSelecionadoDaListaClientes = 0;
        initComponents();
        this.clienteSocket = new SocketCliente(infoCliente, this, socket);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMessages = new javax.swing.JTextArea();
        jTextFieldMessage = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListClientes = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton1.setText("Enviar");
        jButton1.setPreferredSize(new java.awt.Dimension(70, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextAreaMessages.setEditable(false);
        jTextAreaMessages.setColumns(20);
        jTextAreaMessages.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jTextAreaMessages.setLineWrap(true);
        jTextAreaMessages.setRows(5);
        jScrollPane1.setViewportView(jTextAreaMessages);

        jTextFieldMessage.setToolTipText("");
        jTextFieldMessage.setPreferredSize(new java.awt.Dimension(59, 30));
        jTextFieldMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMessageActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 204, 204));
        jButton2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 0));
        jButton2.setText("Sair");
        jButton2.setPreferredSize(new java.awt.Dimension(70, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Conectados:");

        jListClientes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jListClientes.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jListClientes.setModel(listaClientes);
        jListClientes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListClientes.setSelectedIndex(0);
        jListClientes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListClientesValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListClientes);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel2.setText("Mensagem:");

        jButton3.setBackground(new java.awt.Color(204, 204, 204));
        jButton3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton3.setText("Enviar arquivo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(204, 204, 204));
        jButton5.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton5.setText("Baixar arquivo");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(jTextFieldMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.acaoParaEnviarMensagem(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.acaoParaSair();
        this.irParaLogin();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.acaoParaSair();
    }//GEN-LAST:event_formWindowClosing

    private void jTextFieldMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMessageActionPerformed
        // TODO add your handling code here:
        this.acaoParaEnviarMensagem(false);
    }//GEN-LAST:event_jTextFieldMessageActionPerformed

    private void jListClientesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListClientesValueChanged
        // TODO add your handling code here:
        int antigoIdParaMensagem = this.idSelecionadoDaListaClientes;
        if (jListClientes.getSelectedIndex() == 0)
            this.idSelecionadoDaListaClientes = 0;
        else
            this.idSelecionadoDaListaClientes = this.clienteSocket.getClienteDaListaClientes(jListClientes.getSelectedIndex() - 1).getId();
        if (antigoIdParaMensagem != this.idSelecionadoDaListaClientes) {
            this.jTextAreaMessages.setText("");
            int idDe, idPara;
            if (idSelecionadoDaListaClientes == 0) {
                idDe = 0;
                idPara = 0;
            } else {
                idDe = idSelecionadoDaListaClientes;
                idPara = informacoesCliente.getId();
            }
            this.clienteSocket.enviarMensagem(ComandoEnum.RECARREGAR, idDe, idPara, null);
        }
    }//GEN-LAST:event_jListClientesValueChanged
    // responsavel por enviar o arquivo 
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showDialog(null, "Enviar");
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            long fileLength = file.length();
            if (fileLength > Integer.MAX_VALUE)
                JOptionPane.showMessageDialog(null, "Arquivo muito grande, não é possível transferi-lo.", "Erro ao transferir arquivo.", JOptionPane.ERROR_MESSAGE);
            else if (!file.isFile())
                JOptionPane.showMessageDialog(null, "A seleção não é um arquivo.", "Erro ao transferir arquivo.", JOptionPane.ERROR_MESSAGE);
            else {
                clienteSocket.transferirArquivo(idSelecionadoDaListaClientes, file);
            }       
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String caminho = JOptionPane.showInputDialog(null, "Informe o caminho do arquivo", "Caminho do arquivo", JOptionPane.QUESTION_MESSAGE);
        if (caminho != null && !caminho.trim().isEmpty()) {
            String local = escolherLocalParaSalvarArquivo();
            if (local != null && !local.trim().isEmpty()) {
                clienteSocket.baixarArquivo(caminho, local);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    public String escolherLocalParaSalvarArquivo() {
        JFileChooser fileChooser = new JFileChooser(); 
        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setDialogTitle("Escolha o diretório para salvar");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            return fileChooser.getSelectedFile().toString();
        }
        return null;
    }
    
    private void acaoParaSair() {
        this.clienteSocket.enviarMensagem(ComandoEnum.SAIR);
    }
    
    private void irParaLogin() {
        this.dispose();
        new UILogin().setVisible(true);
    }
    
    private void acaoParaEnviarMensagem(boolean comAlerta) {
        if (jTextFieldMessage != null && !jTextFieldMessage.getText().trim().isEmpty()) {
            ComandoEnum comandoEnum;
            if (comAlerta)
                comandoEnum = ComandoEnum.MENSAGEMA;
            else
                comandoEnum = ComandoEnum.MENSAGEM;
            this.clienteSocket.enviarMensagem(comandoEnum, informacoesCliente.getId(), idSelecionadoDaListaClientes, jTextFieldMessage.getText());
            this.jTextFieldMessage.setText("");
        } else {
            JOptionPane.showMessageDialog(null, "Digite a mensagem...", "Mensagem não enviada.", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jListClientes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaMessages;
    private javax.swing.JTextField jTextFieldMessage;
    // End of variables declaration//GEN-END:variables

    public void adicionarMensagemNoCampoDeMensagens(ComandoMensagem mensagemObj) {
        if ((idSelecionadoDaListaClientes == 0 && mensagemObj.getMensagemPara() == 0) ||
            (mensagemObj.getMensagemPara() == this.informacoesCliente.getId() && idSelecionadoDaListaClientes == mensagemObj.getMensagemDe()) ||
            (mensagemObj.getMensagemDe() == this.informacoesCliente.getId() && idSelecionadoDaListaClientes == mensagemObj.getMensagemPara())) {
            jTextAreaMessages.append(mensagemObj.getMensagem());
        }
    }
    
    public void adicionarClienteAListaClientes(InformacoesCliente infoCliente) {
        listaClientes.addElement(pegarTextoParaCampoDeMensagens(infoCliente));
    }
    
    private String pegarTextoParaCampoDeMensagens(InformacoesCliente infoCliente) {
        return "(" + infoCliente.getId() + ") " + infoCliente.getNome() + "\n";
    }
    
    public void removerClienteDaListaClientes(InformacoesCliente infoCliente) {
        if (idSelecionadoDaListaClientes == infoCliente.getId()) {
            jListClientes.setSelectedIndex(0);
            idSelecionadoDaListaClientes = 0;
        }
        listaClientes.removeElement(pegarTextoParaCampoDeMensagens(infoCliente));
    }
    
    public void registrarAMim(InformacoesCliente infoCliente) {
        this.informacoesCliente.setId(infoCliente.getId());
        this.setTitle("Cliente - (" + this.informacoesCliente.getId() + ") " + this.informacoesCliente.getNome());
    }

    public void desconectarAMim() {
        JOptionPane.showMessageDialog(null, "O servidor foi desconectado, retornando a tela de login.", "O servidor parou", JOptionPane.ERROR_MESSAGE);
        this.irParaLogin();
    }
}
